// This defines layouts.

// Container. Add some room left and right of its content. This has also the
// added benefit of restricting its maximum horizontal dimension.

.u-container {
  width: 100%;
  min-width: calc(15.1rem - 2 * var(--grid-gutter));
  max-width: var(--grid-max-width);
  padding-inline: var(--grid-gutter);
  margin-inline: auto;
}

.u-container-vertical {
  // TODO I'd like the padding-top to be the same as the flow-all for a c-text
  // h1. I.e. using flow-all or using u-container-vertical should be the same.
  // In addition, a c-text h1 could also match the position of the Refli logo
  // in the navigation bar.

  padding-block: var(--grid-gutter);
}
.u-container-top {
  padding-block-start: var(--grid-gutter);
}
.u-container-bottom {
  padding-block-end: var(--grid-gutter);
}

// Inset. Add some room around its content.

.inset {
  padding: var(--grid-gutter);
}

// Box. Similar to inset, with a border.
// Similar to Panel in Mono's work ?
.box {
  padding: var(--grid-gutter);
  border: 2px solid black;
}

.box--light {
  border: 2px solid #DDD;
}

// Bar. Separate items organized horizontally.

.u-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;

  &--top-aligned {
    align-items: start;
  }
}
.u-bar__left {
}
.u-bar__right {
  ul li {
    display: inline;
    margin-left: var(--space-s);
  }
}

.hsep {
  display: flex;
  gap: 1em;
  flex-direction: row;
  flex-wrap: wrap;
}

.vsep {
  display: flex;
  gap: 1em;
  flex-direction: column;
}

.hspread {
  display: flex;
  gap: 1em;
  flex-direction: row;
  flex-wrap: wrap;

  justify-content: space-between;
}

// Use to make child div of .hspread take more horizontal room.
.grow {
  flex-grow: 1;
}

// Switcher. Separate items organized horizontally, or vertically if the parent
// is too narrow.

.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-m);
}

.switcher > * {
  --measure: 80ch;
  flex-basis: calc((var(--measure) - 100%) * 999);
  flex-grow: 1;
}

.switcher--bigger-left > :first-child {
  flex-grow: 2.0; // Increase the flex-grow factor for the first child
}

.switch-at-60rem > * {
  --measure: 37.5rem;
  flex-basis: calc((var(--measure) - 100%) * 999);
}

.switcher-0px {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row-reverse; // We want the last button horizontally (right hand) be the first vertically.
  gap: 4px 0px; // We want a small gap vertically.
}

.switcher-0px > * {
  --measure: 40ch;
  flex-basis: calc((var(--measure) - 100%) * 999);
  flex-grow: 1;
}

// Ensure a child content has a specific height, and place it vertically centered.
// I think this is a "strut".
.height-64px {
  height: 64px;
  display: flex;
  align-items: center;
}

/* -----------------------------------------------------------------------------
   Layout Utilities moved from misc.scss
   -------------------------------------------------------------------------- */

.with-sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-m);
}

.with-sidebar .sidebar {
  flex-grow: 1;
}

.with-sidebar .main {
  flex-basis: 0;
  flex-grow: 999;
  min-inline-size: 50%;
}

/* Top-level wrapper to push the footer at the bottom of the viewport.
   This is useful when there is not enough content to push the footer
   down the page.
   This should be used on the main div, or directly on the body (and
   should directly enclose the footer).

   This could be extended to vertically center some main content:
   https://github.com/aprietof/every-layout/blob/master/layouts.css#L156-L185
*/
.cover {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.cover > main {
  margin-block: auto;
}

.cover > footer {
  margin-top: auto;
}

.u-grid {
  display: grid;
  gap: var(--grid-gutter);
  grid-template-columns: repeat(12, 1fr);
}
