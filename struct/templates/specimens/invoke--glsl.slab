include ../includes/mixins/icons.slab
doctype html
html(dir="ltr", lang="fr")
    head
        meta(charset="utf-8")
        meta(name="viewport" content="width=device-width, initial-scale=1")
        link(rel="stylesheet", href="/static/css/struct.css")
        script.
            function resetInput() {
                const fragmentShaderSource = `#version 300 es
            precision mediump float;

            out vec4 color;

            void main() {
                color = vec4(1.0, 0.0, 0.0, 1.0); // Set the whole screen red
            }
            `;
                document.getElementById('input-text').value = fragmentShaderSource;
                updateCanvas();
            }

            function updateCanvas() {
                const canvas = document.getElementById('canvas');
                const gl = canvas.getContext('webgl2');

                const vertexShaderSource = `#version 300 es
                precision mediump float;

                in vec2 position;

                void main() {
                    gl_Position = vec4(position, 0.0, 1.0);
                }
                `;

                const fragmentShaderSource = document.getElementById('input-text').value;

                // Create, compile, and link shaders
                const vertexShader = gl.createShader(gl.VERTEX_SHADER);
                gl.shaderSource(vertexShader, vertexShaderSource);
                gl.compileShader(vertexShader);

                const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
                gl.shaderSource(fragmentShader, fragmentShaderSource);
                gl.compileShader(fragmentShader);

                const program = gl.createProgram();
                gl.attachShader(program, vertexShader);
                gl.attachShader(program, fragmentShader);
                gl.linkProgram(program);

                gl.viewport(0, 0, canvas.width, canvas.height);
                gl.clearColor(0, 0, 0, 1);
                gl.clear(gl.COLOR_BUFFER_BIT);

                // Create a fullscreen quad
                const numComponents = 2; // x and y components
                const vertices = new Float32Array([
                    -1, -1,
                    1, -1,
                    -1, 1,
                    1, 1
                ]);
                const numVertices = vertices.length / numComponents;

                const vertexBuffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
                gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

                gl.useProgram(program);
                const positionAttribLocation = gl.getAttribLocation(program, "position");
                gl.vertexAttribPointer(positionAttribLocation, 2, gl.FLOAT, false, 0, 0);
                gl.enableVertexAttribArray(positionAttribLocation);
                gl.drawArrays(gl.TRIANGLE_STRIP, 0, numVertices);
            }

            window.onload = resetInput;
    body
        .u-container
            .c-text.flow-all
                h1 The Invoke (JavaScript)
                p The Invoke is a two-column layout where the left part is some kind of input (e.g. a text editor, some UI widgets, a form, ...) and the right part shows some result.
        .u-container
            style.
              #canvas { display: block; width: 100%; }
              #input-text { display: block; width: 100%; height: 20em; resize: none; }
            .switcher
                .c-content.flow
                    textarea#input-text
                    div
                        button.c-button.c-button--primary(onclick="updateCanvas()")
                            span Process
                            arrow-right
                    div
                        button.c-button.c-button--secondary(onclick="resetInput()")
                            span Reset
                .flow
                    canvas#canvas
